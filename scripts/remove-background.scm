(define (remove-background filePattern width withShadow)
	(let*
		(
			(filelist (cadr (file-glob filePattern 1)))
		)
		(while (not (null? filelist))
			(let*
				(
					(inFile (car filelist))
					(outFile (string-append "../out/" inFile))
					(image (car (gimp-file-load RUN-NONINTERACTIVE inFile inFile)))
					(drawable (car (gimp-image-get-active-layer image)))
					(blackColor '(0 0 0))
					(redColor '(255 0 0))
					(imh (car (gimp-image-height image)))
					(imw (car (gimp-image-width image)))
					(vstep 0)
					(hstep 0)
					(va 12)
					(vb 12)
					(vc 12)
					(vd 12)
					(ve 12)
					(ha 12)
					(hb 12)
					(hc 12)
					(hd 12)
					(he 12)
					(thrsh 25)
					(pickColor '(0 0 0))
					(scale 1)
					(height 0)
				)
				(gimp-image-undo-disable image)
				(gimp-message inFile)
				
				(when (> imw 800)
					(set! scale (/ 800 imw))
					(set! height (floor (* imh scale)))
					(gimp-image-scale image 800 height)
					(set! imh (car (gimp-image-height image)))
					(set! imw (car (gimp-image-width image)))
				)
				(gimp-levels drawable HISTOGRAM-VALUE 8 242 1 0 255)
				(plug-in-unsharp-mask RUN-NONINTERACTIVE image drawable 5 0.3 0)
				
				(set! hstep (floor (/ imw 4)))
				(set! vstep (floor (/ imh 4)))
				(set! va 12)
				(set! vb vstep)
				(set! vc (* vstep 2))
				(set! vd (* vstep 3))
				(set! ve (- imh 12))
				(set! ha 22)
				(set! hb hstep)
				(set! hc (* hstep 2))
				(set! hd (* hstep 3))
				(set! he (- imw 22))

				(set! pickColor (car (gimp-image-pick-color image drawable ha ve TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable ha vd TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable ha vc TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable ha vb TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable ha va TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable hb va TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable hc va TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable hd va TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable he va TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable he vb TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable he vc TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable he vd TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				(set! pickColor (car (gimp-image-pick-color image drawable he ve TRUE FALSE 0)))
				(gimp-by-color-select drawable pickColor thrsh CHANNEL-OP-ADD TRUE FALSE 0 FALSE)
				
				(gimp-selection-grow image 2)
				(gimp-selection-feather image 4)
				
				(gimp-image-resize image imw (* imh 2) 0 0)
				(gimp-image-flatten image)
				(set! drawable (car (gimp-image-get-active-layer image)))
				(gimp-selection-translate image 0 imh)
				
				(gimp-context-set-foreground blackColor)
				(gimp-edit-fill drawable FOREGROUND-FILL)
				(gimp-selection-none image)
				
				(set! scale (/ width imw))
				(set! height (* (floor (* imh scale)) 2))
				;(gimp-message (number->string height))
				(gimp-image-scale image width height)
				
				(set! height (+ (/ height 2) 1))
				(gimp-rect-select image 0 height 2 2 CHANNEL-OP-REPLACE FALSE 0)
				(gimp-context-set-foreground redColor)
				(gimp-edit-fill drawable FOREGROUND-FILL)
				
				(gimp-file-save RUN-NONINTERACTIVE image drawable outFile outFile)
				
				(gimp-image-delete image)
			)
			(set! filelist (cdr filelist))
		)
	)
)
